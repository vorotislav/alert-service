// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vorotislav/alert-service/internal/http/handlers/value (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AllCounterMetrics mocks base method.
func (m *MockRepository) AllCounterMetrics(arg0 context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllCounterMetrics", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllCounterMetrics indicates an expected call of AllCounterMetrics.
func (mr *MockRepositoryMockRecorder) AllCounterMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllCounterMetrics", reflect.TypeOf((*MockRepository)(nil).AllCounterMetrics), arg0)
}

// AllGaugeMetrics mocks base method.
func (m *MockRepository) AllGaugeMetrics(arg0 context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllGaugeMetrics", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllGaugeMetrics indicates an expected call of AllGaugeMetrics.
func (mr *MockRepositoryMockRecorder) AllGaugeMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllGaugeMetrics", reflect.TypeOf((*MockRepository)(nil).AllGaugeMetrics), arg0)
}

// GetCounterValue mocks base method.
func (m *MockRepository) GetCounterValue(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounterValue", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounterValue indicates an expected call of GetCounterValue.
func (mr *MockRepositoryMockRecorder) GetCounterValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounterValue", reflect.TypeOf((*MockRepository)(nil).GetCounterValue), arg0, arg1)
}

// GetGaugeValue mocks base method.
func (m *MockRepository) GetGaugeValue(arg0 context.Context, arg1 string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGaugeValue", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGaugeValue indicates an expected call of GetGaugeValue.
func (mr *MockRepositoryMockRecorder) GetGaugeValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGaugeValue", reflect.TypeOf((*MockRepository)(nil).GetGaugeValue), arg0, arg1)
}
